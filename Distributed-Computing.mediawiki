Distributed/ Cloud/ Cluster/ Parallel computing, GIS, Networking, frameworks and other Web related things go here:

= Distributed/ Cloud/ Cluster/ Parallel = 
* AWS.jl :: [https://github.com/amitmurthy/AWS.jl supports the EC2 and S3 API's, letting you start / stop EC2 instances dynamically].
* LCJC.jl:: [https://github.com/amitmurthy/LCJC.jl Loosely Coupled Julia Clusters].
* [https://github.com/amitmurthy/PTools.jl A collection of utilities for parallel computation in Julia].
 
 
==== Docs, Blogs, ... ====
* [http://docs.julialang.org/en/latest/stdlib/base/#parallel-computing How to use AWS EC2 machines via addprocs].
* [http://blog.leahhanson.us/using-tcp-sockets-in-julia.html TCP Sockets documentation for webstack.jl]


= GIS API =
* A Julia package to estimate the [https://github.com/johnmyleswhite/GeoIP.jl geographic location of IP addresses].


== HTTP ==
* The [http://juliawebstack.org Julia Webstack] is a family of modules for building web services, hosting the documentation for Morsel, Meddle, WebSockets, HttpServer, HttpParser, and HttpCommon:
** HttpServer.jl :: [https://github.com/JuliaLang/HttpServer.jl a basic, non-blocking HTTP server] in Julia.
** Meddle.jl :: is the [https://github.com/JuliaLang/Meddle.jl middleware stack for use with HttpServer.jl].
** Morsel.jl:: is a Sintra-like [https://github.com/JuliaLang/Morsel.jl micro framework for declaring routes and handling requests], built over HttpServer.jl and Meddle.jl.
** HttpCommon.jl :: [https://github.com/JuliaLang/HttpCommon.jl Provides types and helper functions for dealing with the HTTP protocol] in Julia.
** HttpParser.jl :: [https://github.com/JuliaLang/HttpParser.jl Julia wrapper for Joyent's http-parser].
** WebSockets.jl:: [https://github.com/JuliaLang/WebSockets.jl A WebSockets server library] for Julia.
* LibCURL.jl :: A thin [https://github.com/amitmurthy/LibCURL.jl wrapper of libCURL] in Julia.
* [https://github.com/mneudert/Laurence.jl Laurence.jl]
* Requests.jl :: [https://github.com/loladiro/Requests.jl Http client written in julia (depends on joyent/http-parser) for HTTP parsing]. 
* SimJulia.jl :: https://github.com/BenLauwens/SimJulia.jl is a combined continuous time / discrete event process oriented simulation framework] written in Julia inspired by the Simula library DISCO and the Python library SimPy.
* A package to [https://github.com/randyzwitch/UAParser.jl parse user-agent strings] in Julia, a Julia port of a multi-language port of a parser created by Browserscope, of which a YAML file has been provided under Apache License V2.0. To install, use Pkg.clone("https://github.com/randyzwitch/UAParser.jl"), as the package is yet to be a part of the Julia package repository in METADATA.jl.
* URIParser.jl: is a [https://github.com/loladiro/URIParser.jl URI parser] implemented in Julia.
* WWWClient.jl: is a [https://github.com/loladiro/WWWClient.jl  HTTP client] written in julia (depends on joyent/http-parser) for HTTP parsing. 
* ZMQ.jl: [https://github.com/JuliaLang/ZMQ.jl Julia interface to ZeroMQ]


== Networking ==
* SMTPClient.jl:: An [https://github.com/aviks/SMTPClient.jl SMTP client to send emails] from Julia.
* [https://github.com/loladiro/GnuTLS.jl Transport Level Security for Julia Streams provided by GnuTLS].
* [https://github.com/kmsquire/Logging.jl Logging] module.
* [https://github.com/pchronz/juliaflow JuliaFlow] is a controller for software-defined networking (SDN) that implements the OpenFlow Controller Specification 1.0.0. 



