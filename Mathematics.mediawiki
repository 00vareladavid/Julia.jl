= Cryptography =
* Nettle is a [https://github.com/staticfloat/Nettle.jl  simple wrapper around libnettle, a cryptographic library].

= Digital Signal Processing (DSP) =
* The [https://github.com/JuliaDSP/DSP.jl DSP ver-0.0.1 package] includes functions for periodogram estimation, generating window functions, filter design and FFT-based FIR filtering, works on Julia 0.2 and 0.3-prerelease. The [http://dspjl.readthedocs.org/en/latest/ documentation] is available via RTD.org.
* NFFT.jl:: [https://github.com/tknopp/NFFT.jl Julia implementation of the Non-equidistant Fast Fourier Transform (NFFT)].

= DOCS =
* [http://docs.julialang.org/en/release-0.2/manual/mathematical-operations/ Mathematical Operations] and a [https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm#L1-L19 list of all overloadable operators] in Julia.


= Functional programming =
* Monads.jl :: [https://github.com/pao/Monads.jl Monadic expressions and sequences] for Julia. Documentation at [https://monadsjl.readthedocs.org/ https://monadsjl.readthedocs.org/]


= MATH =
* A hierarchy of [https://github.com/alrahimi/algebra/ abstract algebraic structures] in Julia.
* Accelereval.jl :: [https://github.com/lindahua/Accelereval.jl  A Julia framework for accelerated re-compiled evaluation of numerical functions that ensures faster computation].
* AutoDiff.jl :: Juila package for [https://github.com/scidom/AutoDiff.jl performing automatic differentiation].
* Blocks.jl:: is a framework to represent [https://github.com/tanmaykm/Blocks.jl chunks of entities and parallel methods on them].
* Church.jl:: helps you [https://github.com/LaurenceA/Church.jl perform inference in complex, and simple, probabilistic models].
* [https://github.com/timholy/Cartesian.jl Cartesian.jl]: Fast multidimensional algorithms.
* [https://github.com/johnmyleswhite/Calculus.jl Calculus.jl]
* CRF.jl:: [https://github.com/slyrz/CRF.jl Conditional Random Fields] in Julia.
* [https://github.com/natj/CellularAutomata.jl Cellular Automata] package.
* Devectorize.jl :: A Julia framework for [https://github.com/lindahua/Devectorize.jl delayed expression evaluation].
* DualNumbers.jl :: Julia package for representing [https://github.com/scidom/DualNumbers.jl dual numbers and for performing dual algebra].
* Elliptic.jl :: [https://github.com/nolta/Elliptic.jl  Elliptic integral and Jacobi elliptic special functions].
* Geometry2D.jl:: [https://github.com/mroughan/Geometry2D.jl  2D computational geometry package] for Julia programming language.
* GSL.jl:: Julia interface to the [https://github.com/jiahao/GSL.jl GNU Scientific Library] (GSL).
* GaussQuadrature.jl: Another package that generates the [https://github.com/billmclean/GaussQuadrature.jl points and weights of the Gauss quadrature rules].
* GP.jl:: [https://github.com/pschulam/GP.jl Gaussian processes in Julia].
* GLM:: [https://github.com/simonster/Glmnet.jl Julia wrapper for fitting Lasso/ElasticNet GLM models using glmnet]
* Hexagons.jl:: Useful tools for working with [https://github.com/dcjones/Hexagons.jl hexagonal grids].
* [https://github.com/andreasnoackjensen/IterativeLinearSolvers.jl IterativeLinearSolvers.jl]
* JuMP.jl: [https://github.com/IainNZ/JuMP.jl Modelling language for Linear, Integer, and Quadratic Programming]
* KrylovSolvers.jl: Solve sparse linear systems in an efficiently and iterative manner with [https://github.com/cfbaptista/KrylovSolvers.jl Krylov Solvers]
* [https://github.com/lindahua/MATLAB.jl Matlab.jl] and how to [https://github.com/lindahua/MATLAB.jl#readwrite-mat-files read-write MATLAB files].
* MUMPS :: A wrapper for [https://github.com/lruthotto/MUMPS MUMPS (a MUltifrontal Massively Parallel sparse direct Solver of large linear systems)] in Julia.
* NumericExtensions.jl: Julia extensions to provide high performance computational support for [https://github.com/lindahua/NumericExtensions.jl fast vectorized computation]
* [https://github.com/JuliaOpt/Optim.jl Optim.jl]: basic optimization algorithms implementation.
* [https://github.com/cfbaptista/PolyMath.jl PolyMath.jl]: package for polynomial arithmetic, calculus, interpolation and quadrature algorithms implemented in Julia.
* Quadrature.jl: [https://github.com/kofron/Quadrature.jl Gauss quadrature in Base]
* RAD.jl:: [https://github.com/adamkapor/RAD.jl package defines a macro, @autodiff, for reverse-mode automatic differentiation (RAD)].
* Roots.jl: [https://github.com/JuliaLang/Roots.jl Root finding functions for Julia]
* [https://github.com/jverzani/SymPy.jl Julia interface to SymPy via PyCall]
* Julia port of [https://github.com/lejon/TSne.jl  L.J.P. van der Maaten and G.E. Hinton's T-SNE visualisation technique]. Read about the [http://homepage.tudelft.nl/19j49/t-SNE.html t-Distributed Stochastic Neighbor Embedding].
* NLreg.jl:: [https://github.com/dmbates/NLreg.jl  Nonlinear regression in Julia]
* NLsolve.jl:: [https://github.com/EconForge/NLsolve.jl  Julia solvers for systems of nonlinear equations].
* NumericalShadow.jl:: Library to calculate [https://github.com/pgawron/NumericalShadow.jl numerical shadows] in Julia language.
* ols.jl:: [https://github.com/forio/ols.jl Julia type for multiple (multivariate) regression using OLS] - Performs least squared regression on linear equations of multiple independent variables.
* Polynomial.jl:: [https://github.com/vtjnash/Polynomial.jl  Polynomial manipulations] and [https://gist.github.com/mathpup/8514578 PolyExt.jl], an extension of Polynomial.jl to support polynomial division, with handy conversions and promotion rules. 
* PowerSeries.jl:: [https://github.com/jwmerrill/PowerSeries.jl Truncated Power Series] for Julia, which exports a Series type that represents a truncated power series by its coefficients. You can do arithmetic on Series and apply functions to series just as you would Real or Complex numbers.
* Quat.jl:: [https://github.com/forio/Quat.jl Quaternions, octonions and dual-quaternions].
* RandomMatrices.jl :: [https://github.com/jiahao/RandomMatrices.jl Random Matrices]
* SortingAlgorithms.jl: [https://github.com/JuliaLang/SortingAlgorithms.jl extra sorting algorithms extending Julia's sorting API]
* SemiringAlgebra.jl :: [https://github.com/ViralBShah/SemiringAlgebra.jl Semiring Algebra]
* SuperLU.jl:: Julia interface to the [https://github.com/dmbates/SuperLU.jl SuperLU solver package for sparse systems].
* Sobol.jl :: is a [https://github.com/stevengj/Sobol.jl  generation of Sobol low-discrepancy sequence (LDS)] implementation, that generates "quasi-random" sequences of points in N dimensions which are equally distributed over an N-dimensional hypercube.
* SurfaceMesh.jl:: is a [https://github.com/michelk/SurfaceMesh.jl Finite element surface mesh manipulation library] to work with polygon-surface-meshes.
* Tensors.jl:: [https://github.com/pgawron/Tensors.jl Julia package for tensor decompositions].
* Uncertain.jl:: [https://github.com/rephorm/Uncertain.jl Uncertain quantities and error propagation] for the Julia language.




