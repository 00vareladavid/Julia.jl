AI, Algorithms, Data Mining, (Array) Data Structures, Machine Learning, NLP, ...


= ALGORITHMS =
== Bloom Filters ==
* [https://github.com/johnmyleswhite/BloomFilters.jl Bloom filters] are a probabilistic data structure that can be used to test the inclusion and exclusion of items in a list.

== Common Search Algorithms ==
* NearestNeighbors.jl:: [https://github.com/johnmyleswhite/NearestNeighbors.jl Data structures for nearest neighbor search].
* Loess.jl:: is a loess implementation based on the [https://github.com/dcjones/Loess.jl fast kd-tree based approximation algorithm], a space-partitioning data structure for organizing points in a k-dimensional space.

== Clustering algorithms ==
* Clustering.jl:: Basic functions for [https://github.com/johnmyleswhite/Clustering.jl [clustering data: k-means, dp-means], etc..

== (Array) Data Structures ==
* [http://julialang.org/Graphs.jl/index.html Documentation for Graphs.jl], a Julia package that provides graph types and algorithms.
* ImmutableArrays.jl:: [https://github.com/twadleigh/ImmutableArrays.jl Statically-sized immutable vectors and matrices].
* ArrayViews.jl :: A Julia package to [https://github.com/lindahua/ArrayViews.jl explore a new system of array views].
* [https://github.com/davidavdav/NamedArray NamedArray], a Julia type that implements a drop-in replacement of Array with named dimensions and Dict-type indexes.


= ML, DATA SCIENCE =
* [https://github.com/bensadeghi/DecisionTree.jl Decision Tree]
* The [https://github.com/johnmyleswhite/kNN.jl K-nearest neighbors] algorithm in Julia.


= NLP =
* Julia package for [https://github.com/johnmyleswhite/TextAnalysis.jl text analysis].
* The [https://github.com/lindahua/DataStructures.jl DataStructures.jl] package also has Peter Norvig's spelling corrector ported to Julia as a default dictionary implementation.
* [https://github.com/iamed2/PyLexYacc.jl PyLexYacc.jl], an interface to Python Lex-Yacc package that uses reflection for most of its processing. 

== Unicode, Encodings ==
* ICU.jl :: Julia wrapper for the [https://github.com/nolta/ICU.jl International Components for Unicode (ICU) library].
* Codecs.jl:: [https://github.com/dcjones/Codecs.jl Common data encoding algorithms].
* [https://github.com/nolta/UnicodeExtras.jl UnicodeExtras.jl]
* UTF16.jl :: [https://github.com/nolta/UTF16.jl  UTF16 string type] for Julia.
= Nonlinear Optimization =
* NLopt.jl:: Package to call the [https://github.com/JuliaOpt/NLopt.jl NLopt nonlinear-optimization library] from the Julia language.



