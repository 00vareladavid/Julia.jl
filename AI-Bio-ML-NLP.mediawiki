AI, Algorithms, Bioinformatics, Biotech, Data Mining, Data Structures, Machine Learning, NLP, ...

= Bioinformatics, Biotech =
* [https://github.com/forio/GeneticAlgorithms.jl GeneticAlgorithms.jl] is a lightweight framework that simplifies the process of creating genetic algorithms and running them in parallel.
* Circuitscape.jl:: A [https://github.com/tanmaykm/Circuitscape.jl Julia implementation] of the [http://www.circuitscape.org/ Circuitscape] lib in Python, that uses electronic circuit theory to solve problems in landscape ecology.


== Bloom Filters ==
* [https://github.com/johnmyleswhite/BloomFilters.jl Bloom filters] are a probabilistic data structure that can be used to test the inclusion and exclusion of items in a list.


== Machine Learning, Data Mining ==
* [https://github.com/bensadeghi/DecisionTree.jl Decision Tree]
* The [https://github.com/johnmyleswhite/kNN.jl K-nearest neighbors] algorithm in Julia.


== NLP ==
* Julia package for [https://github.com/johnmyleswhite/TextAnalysis.jl text analysis].
* The [https://github.com/lindahua/DataStructures.jl DataStructures.jl] package also has Peter Norvig's spelling corrector ported to Julia as a default dictionary implementation.
* [https://github.com/iamed2/PyLexYacc.jl PyLexYacc.jl], an interface to Python Lex-Yacc package that uses reflection for most of its processing. 


== Nonlinear Optimization ==
* NLopt.jl:: Package to call the [https://github.com/JuliaOpt/NLopt.jl NLopt nonlinear-optimization library] from the Julia language.


== Statistics ==
* [https://github.com/JuliaStats/Stats.jl Basic statistics functions for Julia].
* The [http://juliastats.github.io/Distributions.jl/index.html Distributions] package.
* The [http://juliastats.github.io/DataFrames.jl/io.html DataFrames manual section on IO]
* [https://github.com/dmbates/MixedModels.jl GLMM]
* [https://github.com/lindahua/DiscreteInference.jl Viterbi algorithm]
* [https://github.com/johnmyleswhite/SmoothingKernels.jl Smoothing kernels for use in kernel regression and kernel density estimation].
* MCMC.jl:: is a [https://github.com/JuliaStats/MCMC.jl generic engine for implementing Bayesian statistical models using Markov Chain Monte Carlo (MCMC) methods]. 
